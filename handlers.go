package main

import (
	"embed"
	"huskki/config"

	"log"
	"net/http"
	"time"

	ds "github.com/starfederation/datastar-go/datastar"
)

//go:embed static/*
var static embed.FS

// IndexHandler is the main entrypoint for the UI
func (s *server) IndexHandler(w http.ResponseWriter, _ *http.Request) {
	err := s.ui.Templates().ExecuteTemplate(w, "index", s.ui.Data())
	if err != nil {
		log.Printf("couldn't execute template for index %s", err)
		w.WriteHeader(http.StatusInternalServerError)
	}
}

// EventsHandler is called on page load and pushes page changes to the client via SSE,
// based on events generated by the Huskki input source (live / replay)
func (s *server) EventsHandler(w http.ResponseWriter, r *http.Request) {
	sse := ds.NewSSE(w, r)

	_, ch, cancel := s.eventHub.Subscribe()
	defer cancel()

	for {
		select {
		case <-r.Context().Done():
			return
		case event := <-ch:
			updateFunc := s.ui.GeneratePatchOnEvent(event)
			if updateFunc != nil {
				err := updateFunc(sse)
				if err != nil {
					log.Printf("error updating template for event: %s", err)
					w.WriteHeader(http.StatusInternalServerError)
					return
				}
			}
		}
	}
}

func (s *server) TimeHandler(w http.ResponseWriter, r *http.Request) {
	sse := ds.NewSSE(w, r)

	ctx := r.Context()
	ticker := time.NewTicker(1000 / config.FRAMERATE * time.Millisecond)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case tick := <-ticker.C:
			err := s.ui.OnTick(sse, int(tick.UnixMilli()))
			if err != nil {
				log.Printf("error updating template for event: %s", err)
				return
			}
		}
	}
}
